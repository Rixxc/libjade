
require "sha512_globals.jinc"

inline fn __initH_ref() -> stack u64[8]
{
  inline int i;
  stack u64[8] H;
  reg ptr u64[8] Hp;
  reg u64 v;

  Hp = SHA512_H;

  for i=0 to 8
  { v = Hp[i];
    H[i] = v; }

  return H;
}

inline fn __load_H_ref(reg ptr u64[8] H) -> reg u64, reg u64, reg u64, reg u64,
                                            reg u64, reg u64, reg u64, reg u64,
                                            reg ptr u64[8]
{
  reg u64 a b c d e f g h;

  a = H[0];
  b = H[1];
  c = H[2];
  d = H[3];
  e = H[4];
  f = H[5];
  g = H[6];
  h = H[7];

  return a, b, c, d, e, f, g, h, H;
}

inline fn __store_H_ref(reg ptr u64[8] H, reg u64 a b c d e f g h) -> reg ptr u64[8]
{
  H[0] = a;
  H[1] = b;
  H[2] = c;
  H[3] = d;
  H[4] = e;
  H[5] = f;
  H[6] = g;
  H[7] = h;

  return H;
}

inline fn __SHR_ref(reg u64 x, inline int c) -> reg u64
{
  reg u64 r;
  r   = x;
  r >>= c;
  return r;
}

inline fn __ROTR_ref(reg u64 x, inline int c) -> reg u64
{
  reg u64 r;
  r = x;
  _, _, r = #ROR_64(r, c);
  return r;
}

//(x & y) ^ (!x & z)
inline fn __CH_ref(reg u64 x y z) -> reg u64
{
  reg u64 r s;

  r  =  x;
  r &=  y;
  s  =  x;
  s  = !s;
  s &=  z;
  r ^=  s;

  return r;
}

//(x & y) ^ (x & z) ^ (y & z)
inline fn __MAJ_ref(reg u64 x y z) -> reg u64
{
  reg u64 r s;

  r  = x;
  r &= y;
  s  = x;
  s &= z;
  r ^= s;
  s  = y;
  s &= z;
  r ^= s;

  return r;
}

// (x >>> 28) ^ (x >>> 34) ^ (x >>> 39)
inline fn __BSIG0_ref(reg u64 x) -> reg u64
{
  reg u64 r s;

  r  = __ROTR_ref(x, 28);
  s  = __ROTR_ref(x, 34);
  r ^= s;
  s  = __ROTR_ref(x, 39);
  r ^= s;

  return r;
}

// (x >>> 14) ^ (x >>> 18) ^ (x >>> 41)
inline fn __BSIG1_ref(reg u64 x) -> reg u64
{
  reg u64 r s;

  r  = __ROTR_ref(x, 14);
  s  = __ROTR_ref(x, 18);
  r ^= s;
  s  = __ROTR_ref(x, 41);
  r ^= s;

  return r;
}

// (x >>> 1) ^ (x >>> 8) ^ (x >> 7)
inline fn __SSIG0_ref(reg u64 x) -> reg u64
{
  reg u64 r s;

  r  = __ROTR_ref(x, 1);
  s  = __ROTR_ref(x, 8);
  r ^= s;
  s  = __SHR_ref(x, 7);
  r ^= s;

  return r;
}

// (x >>> 19) ^ (x >>> 61) ^ (x >> 6)
inline fn __SSIG1_ref(reg u64 x) -> reg u64
{
  reg u64 r s;

  r  = __ROTR_ref(x, 19);
  s  = __ROTR_ref(x, 61);
  r ^= s;
  s  = __SHR_ref(x, 6);
  r ^= s;

  return r;
}

// Wt = SSIG1(W(t-2)) + W(t-7) + SSIG0(t-15) + W(t-16)
inline fn __Wt_ref(stack u64[80] W, inline int t) -> stack u64[80]
{
  reg u64 wt wt2 wt15;

  wt2  = W[t-2];
  wt   = __SSIG1_ref(wt2);
  wt  += W[t-7];
  wt15 = W[t-15];
  wt15 = __SSIG0_ref(wt15);
  wt  += wt15;
  wt  += W[t-16];

  W[t] = wt;

  return W;
}

fn _blocks_0_ref(reg ptr u64[25] pstate) -> reg ptr u64[25]
{
  inline int t;
  reg u64 T1 T2 a b c d e f g h r v;
  reg ptr u64[25] _state;
  stack ptr u64[25] state_s;
  stack u64[80] W;
  reg ptr u64[80] Kp;
  stack ptr u64[8] Hp;
  reg ptr u64[8] H;
  reg u64 tr;
  
  state_s = pstate;
  _state = pstate;
  
  Kp = SHA512_K;
  
  H = _state[16:8];

  for t=0 to 16
  { v = _state[t];
    v = #BSWAP_64(v);
    W[t] = v;
  }

  for t=16 to 80
  { W = __Wt_ref(W, t); }

  a, b, c, d, e, f, g, h, H = __load_H_ref(H);
  Hp = H;

  tr = 0;
  while(tr < 80)
  {
    //T1 = h + BSIG1(e) + CH(e,f,g) + Kt + Wt
    T1  = h;
    r   = __BSIG1_ref(e);
    T1 += r;
    r   = __CH_ref(e,f,g);
    T1 += r;
    T1 += Kp[(int)tr];
    T1 += W[(int)tr];

    //T2 = BSIG0(a) + MAJ(a,b,c)
    T2  = __BSIG0_ref(a);
    r   = __MAJ_ref(a,b,c);
    T2 += r;

    h  = g;
    g  = f;
    f  = e;
    e  = d;
    e += T1;
    d  = c;
    c  = b;
    b  = a;
    a  = T1;
    a += T2;

    tr+= 1;
  }

  H = Hp;
  a += H[0];
  b += H[1];
  c += H[2];
  d += H[3];
  e += H[4];
  f += H[5];
  g += H[6];
  h += H[7];

  H = __store_H_ref(H,a,b,c,d,e,f,g,h);
  
  _state[16] = H[0];
  _state[17] = H[1];
  _state[18] = H[2];
  _state[19] = H[3];
  _state[20] = H[4];
  _state[21] = H[5];
  _state[22] = H[6];
  _state[23] = H[7];
  
  state_s = _state;
  pstate = state_s;
  
  return pstate;
}

fn _blocks_1_ref(reg ptr u64[8] _H, reg ptr u64[32] sblocks, reg u64 nblocks) -> reg ptr u64[8], reg ptr u64[32]
{
  inline int t;
  reg u64 T1 T2 a b c d e f g h r v;
  stack u64[80] W;
  reg ptr u64[80] Kp;
  stack ptr u64[8] Hp;
  reg ptr u64[8] H;
  stack ptr u64[32] s_sblocks;
  reg u64 i oblocks tr;
  stack u64 s_i;

  Kp = SHA512_K;
  // Hp = _H;
  i = 0;

  H = _H;

  while(i < nblocks)
  {
    s_i = i;
    oblocks = i << 4;
    for t=0 to 16
    { v = sblocks[(int)oblocks + t];
      v = #BSWAP_64(v);
      W[t] = v;
    }
    s_sblocks = sblocks;

    for t=16 to 80
    { W = __Wt_ref(W, t); }

    a, b, c, d, e, f, g, h, H = __load_H_ref(H);
    Hp = H;

    tr = 0;
    while(tr < 80)
    {
      //T1 = h + BSIG1(e) + CH(e,f,g) + Kt + Wt
      T1  = h;
      r   = __BSIG1_ref(e);
      T1 += r;
      r   = __CH_ref(e,f,g);
      T1 += r;
      T1 += Kp[(int)tr];
      T1 += W[(int)tr];

      //T2 = BSIG0(a) + MAJ(a,b,c)
      T2  = __BSIG0_ref(a);
      r   = __MAJ_ref(a,b,c);
      T2 += r;

      h  = g;
      g  = f;
      f  = e;
      e  = d;
      e += T1;
      d  = c;
      c  = b;
      b  = a;
      a  = T1;
      a += T2;

      tr+= 1;
    }

    H = Hp;
    a += H[0];
    b += H[1];
    c += H[2];
    d += H[3];
    e += H[4];
    f += H[5];
    g += H[6];
    h += H[7];

    H = __store_H_ref(H,a,b,c,d,e,f,g,h);

    sblocks = s_sblocks;
    i = s_i;
    i += 1;
  }

  _H = H;
  return _H, sblocks;
}

inline fn __lastblocks_ref(stack u8[128] in, reg u64 inlen bits) -> stack u64[32], reg u64
{
  stack u64[32] sblocks;
  inline int k;
  reg u64 i j nblocks;
  reg u8 v;

  i = 0;

  // Zero-fill the sblocks array
  for k = 0 to 32 { sblocks[k] = i; }

  // copy in to sblocks
  while(i < inlen)
  { v = in[(int)i];
    sblocks[u8 (int)i] = v;
    i += 1;
  }

  // set first byte after input to 0x80 
  sblocks[u8 (int)i] = 0x80;

  // check if one or two blocks are needed
  if(inlen < 112)
  { j = (128-8); nblocks = 1; i = 127; }
  else
  { j = (256-8); nblocks = 2; i = 255; }

  while(i >= j)
  { sblocks[u8 (int)i] = (8u) bits;
    bits >>= 8;
    i -= 1;
  }

  return sblocks, nblocks;
}


